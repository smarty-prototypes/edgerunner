// func (this *SerialScheduler) Schedule(signals <-chan interface{}) {
// 	task := this.runTask()

// 	for range signals {
// 		if len(signals) == 0 {
// 			this.closeTask(task)
// 			task = this.runTask()
// 		}
// 	}

// 	this.closeTask(task)
// }
// func (this *SerialScheduler) runTask() Task {
// 	this.waiter.Add(1)
// 	task := this.factory() // TODO: panic on nil task
// 	task.Init()            // TODO: what to do on error?
// 	go this.runTaskListen(task)
// 	return task
// }
// func (this *SerialScheduler) runTaskListen(task Task) {
// 	task.Listen()
// 	this.waiter.Done()
// }

// func (this *SerialScheduler) closeTask(task Task) {
// 	task.Close()
// 	this.waiter.Wait()
// }
